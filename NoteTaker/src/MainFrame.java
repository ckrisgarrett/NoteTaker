/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import java.io.*;
import org.w3c.dom.*;

/**
 *
 * @author kris
 */
public class MainFrame extends javax.swing.JFrame {
    ArrayList<String> notes = new ArrayList<>();
    DefaultListModel listModel = new DefaultListModel();
    
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
        noteTextArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void removeUpdate(DocumentEvent e) {textChanged();}
            @Override
            public void insertUpdate(DocumentEvent e) {textChanged();}
            @Override
            public void changedUpdate(DocumentEvent arg0) {textChanged();}
        });
    }
    
    private void writeXML() {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.newDocument();
            
            Element root = doc.createElement("notes");
            doc.appendChild(root);
            for (String note : notes) {
                Element element = doc.createElement("note");
                element.appendChild(doc.createTextNode(note));
                root.appendChild(element);
            }
            
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult("notes.xml");
            transformer.transform(source, result);
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void readXML() {
        File f = new File("notes.xml");
        if(!f.exists())
            return;
        
        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse("notes.xml");
            
            doc.getDocumentElement().normalize();
            NodeList nList = doc.getElementsByTagName("note");
            for(int i = 0; i < nList.getLength(); i++) {
                Node node = nList.item(i);
                Element elem = (Element)node;
                String note = elem.getTextContent();
                notes.add(note);
                listModel.addElement(getFirstLine(note));
            }
            if(notes.size() > 0) {
                noteList.setSelectedIndex(0);
                noteTextArea.setEditable(true);
            }
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private String getFirstLine(String s) {
        int i = s.indexOf('\n');
        String retString;
        if (i < 0)
            retString = s;
        else 
            retString = s.substring(0,i);
        
        if (retString.equals(""))
            retString = "<Blank Title>";
        
        return retString;
    }
    
    private void textChanged() {
        if(!noteTextArea.hasFocus())
            return;
        
        int noteIndex = noteList.getSelectedIndex();
        notes.set(noteIndex, noteTextArea.getText());
        listModel.set(noteIndex, getFirstLine(notes.get(noteIndex)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        noteList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        noteTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        deleteNoteButton = new javax.swing.JButton();
        newNoteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Note Taker");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        noteList.setModel(listModel);
        noteList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        noteList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                noteListKeyTyped(evt);
            }
        });
        noteList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                noteListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(noteList);

        noteTextArea.setEditable(false);
        noteTextArea.setColumns(20);
        noteTextArea.setRows(5);
        jScrollPane2.setViewportView(noteTextArea);

        deleteNoteButton.setText("Delete Note");
        deleteNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteNoteButtonActionPerformed(evt);
            }
        });

        newNoteButton.setText("New Note");
        newNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newNoteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newNoteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteNoteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(deleteNoteButton)
                .addComponent(newNoteButton))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void noteListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_noteListValueChanged
        int noteIndex = noteList.getSelectedIndex();
        if(noteIndex >= 0)
            noteTextArea.setText(notes.get(noteIndex));
        else
            noteTextArea.setText("");
    }//GEN-LAST:event_noteListValueChanged

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //writeXML();
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        writeXML();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        readXML();
    }//GEN-LAST:event_formWindowOpened

    private void newNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newNoteButtonActionPerformed
        String newNoteString = "New Note";
        notes.add(newNoteString);
        listModel.addElement(newNoteString);
        noteList.setSelectedIndex(notes.size() - 1);
        noteTextArea.setEditable(true);
    }//GEN-LAST:event_newNoteButtonActionPerformed

    private void deleteNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteNoteButtonActionPerformed
        int noteIndex = noteList.getSelectedIndex();
        if(noteIndex >= 0) {
            notes.remove(noteIndex);
            listModel.removeElementAt(noteIndex);
            if(listModel.size() > 0) {
                noteList.setSelectedIndex(0);
            }
            else {
                noteTextArea.setEditable(false);
            }
        }
    }//GEN-LAST:event_deleteNoteButtonActionPerformed

    private void noteListKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noteListKeyTyped
        if (evt.getKeyChar() == 'u' || evt.getKeyChar() == 'U') {
            int index = noteList.getSelectedIndex();
            if(index > 0)
                swap(index, index - 1);
        }
        if (evt.getKeyChar() == 'd' || evt.getKeyChar() == 'D') {
            int index = noteList.getSelectedIndex();
            if(index < notes.size() - 1)
                swap(index, index + 1);
        }
    }//GEN-LAST:event_noteListKeyTyped

    private void swap(int i1, int i2) {
        String temp1 = notes.get(i1);
        String temp2 = notes.get(i2);
        notes.set(i1, temp2);
        notes.set(i2, temp1);
        listModel.set(i1, getFirstLine(temp2));
        listModel.set(i2, getFirstLine(temp1));
        noteList.setSelectedIndex(i2);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteNoteButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton newNoteButton;
    private javax.swing.JList<String> noteList;
    private javax.swing.JTextArea noteTextArea;
    // End of variables declaration//GEN-END:variables
}
